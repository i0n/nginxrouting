#!/usr/bin/env ruby

ROOT_PATH = File.expand_path(File.join(File.dirname(__FILE__), '..'))

require 'rest_client'
require 'spreadsheet'
require 'trollop'

opts = Trollop::options do
	banner <<-EOS

Script takes a file containing urls and runs them against a specified domain.

Usage: script/test_routes [-f /path/to/spreadsheet.xls] [-c column] [-d www.domain.com] [-r] [-s 2]

Demo: script/test_routes -d nginxrouting.dev.gov.uk -l 2

EOS
	opt :file, "Spreadsheet (xls) to take the URLs from", :short => "f", :default => "#{ROOT_PATH}/spreadsheets/bizlink_ip_mappings.xls"
	opt :column, "Column to take the URLs from (if more than one column in spreadsheet) - start at 0", :short => "l", :default => 0
	opt :domain, "The domain to convert the urls to (e.g. entering 'google.com' will replace 'http://yahoo.com/search=this' with 'http://google.com/search=this' )", :short => 'd'
	opt :headers, "Include the response headers.", :short => "r"
	opt :csv, "File & path to output results (.csv)", :short => "c"
	opt :skiprows, "Skips rows at the start of the spreadsheet (i.e. headers", :short => "s", :default => 1	
	end
end

# get domain
if opts[:domain]
	idom = ARGV[0] 
	puts "URLs will be converted to use this domain: #{idom}" if idom
else
	puts "Please enter a domain with the -d option (type -h for all the options)"
end
# get file
puts "Spreadsheet: #{opts[:file]}"

# get column
puts "Column: #{opts[:column]}"

# open excel spreadsheet from Ben
book = Spreadsheet.open opts[:file]
# get first worksheet
front = book.worksheet 0


# array of old_urls only
old_urls = []
# this is a Spreadsheet gem override of the 'each' iterator
# TODO: figure out how to use 'map' instead, maybe?
front.each opts[:skiprows] do |row|
	old_urls << row[opts[:column]]
end

def revise_url idom=false, url
	# replace current domain with input domain
	unless idom
		url
	else
		# not perfect, but does the job for the moment
		url.gsub(/\/\/.*?\//, "//#{idom}/")
	end
end

# cycle through responses 
statement = "output: old_url, revised_url, response_url, response"
statement += ", headers" if opts[:headers]
puts statement
old_urls[0..2].each do |u|
	revised_url = revise_url(idom,u)
	
	op = ["OLD:\t\t"+u, "Revised:\t"+revised_url]

	RestClient.get(revised_url) { |response, request, result, &block|
		case response.code
		when 200 
			op.unshift 'Alive'
		when 302, 301
			op.unshift "Redirected:"
		when 400, 404 
			op.unshift 'Not found'
		else 
			op.unshift 'Unrecognised'
		end
		op << "NEW:\t\t" + response.headers[:location]	
		op << response.headers if opts[:headers]
		puts op.join("\n\t")
	}
end



if false
	# redundant code - reads in all urls in Ben's spreadsheet urls
	# collection of old_url, clean_url and govuk_url
	collected = []
	# uses function from spreadsheet gem to exclude the first row
	front.each 1 do |row|
		collected << [
			row[2], row[3], row[11]
		]
	end

	old_urls = collected.map { |e| e[0] }

end
